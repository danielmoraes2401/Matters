// <algorithm>
// function(start,final,[](parameters){what i wanna do})
//pode usar função externas
#include <bits/stdc++.h>
using namespace std;


int main(){
cout << "PRINTANDO VECTOR: " << endl;
vector<int> vt = {2,4,12,7,8,10,12,-8,1,3,5,6,9,11,13,2,7,2};
for (int x:vt){
  cout << x << " ";
}cout << endl << endl;

cout << "ALL_OF(RETORNA TRUE SE O TESTE RETORNAR TRUE COM TODOS):" << endl;
if(all_of(vt.begin(),vt.end(),[](int i){return i < 50;})){
  cout << "-Todos menores que 50!" << endl;
} else {
  cout << "-Existe um ou mais elementos maiores que 50." << endl;
} cout << endl;

cout << "ANY_OF (RETORNA TRUE SE O TESTE RETORNAR TRUE COM PELO MENOS UM):" << endl;
if (any_of(vt.begin(),vt.end(),[] (int i) { return i > 12;})) {
  cout << "-Existe um ou mais elementos maiores que 12!" << endl;
} else {
  cout << "-Todos elementos são menores que 12!" << endl;
} cout << endl;

cout << "NONE_OF (RETORNA FALSE SE O TESTE RETORNAR FALSE COM PELO MENOS UM):" << endl;
if (none_of(vt.begin(),vt.end(),[] (int i) { return i < 0;})) {
  cout << "-Todos positivos!" << endl;
} else {
  cout << "-Existe um negativo!" << endl;
} cout << endl;

cout << "FOR_EACH (APLICA UMA FUNÇÃO A TODOS ELEMENTOS DA COLEÇÃO: " << endl;
cout << "DOBRO!!!" << endl;
for_each(vt.begin(), vt.end(),[](int i) {cout << i*2 << " ";});
cout << endl << endl;

cout << "FIND (PROCURA UM ELEMENTO E RETORNA UM ITERATOR COM O RESULTADO):" << endl;
auto it = find(vt.begin(), vt.end(), 12);
if (*it == 12){
  cout << "-Existe!" << endl;
} else {
  cout << "-Não existe!" << endl;
} cout << endl;

cout << "FIND_IF (PROCURA UM ELEMENTO QUE ATENDA A UMA DETERMINADA CONDIÇÃO E RETORNA UM ITERATOR COM O RESULTADO):" << endl;
auto it2 = find_if(vt.begin(), vt.end(),[](int i){return ((i  % 2 ) == 1);});
cout << "-Primeiro elemento impar: " << *it2 << endl << endl;

cout << "FIND_IF_NOT (PROCURA UM ELEMENTO QUE !NÃO! ATENDA A UMA DETERMINADA CONDIÇÃO E RETORNA UM ITERATOR COM O RESULTADO):" << endl;
auto it3 = find_if_not(vt.begin(), vt.end(),[](int i){return ((i  % 2 ) == 1);});
cout << "-Primeiro elemento par: " << *it3 << endl << endl;

cout << "COUNT (QUANTIDADE DE UM DETERMINADO ELEMENTO NA COLEÇÃO):" << endl;
cout << "Quantidade de numero 2: " << count (vt.begin(), vt.end(),2) << endl << endl;

cout << "COUNT_IF (QUANTIDADE DE UM DETERMINADO ELEMENTO NA COLEÇÃO QUE ATENDA UMA CONDIÇÃO):" << endl;
cout << "Quantidade de pares: " << count_if (vt.begin(), vt.end(),[](int i) {return ((i % 2) == 0);}) << endl << endl;



return 0;
}