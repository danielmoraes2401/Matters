// <algorithm>
#include <bits/stdc++.h>
using namespace std;

int main(){
cout << "REPLACE_IF (SUBSTITUI VALORES POR OUTRO, DADA UMA CONDIÇÃO)" << endl;
vector<int>vt1{1,4,7,2,5,8,3,6,9};
replace_if(vt1.begin(),vt1.end(),[] (int i) {return i < 5;}, 10);
for (auto x:vt1){
  cout << x << " ";
} cout << endl << endl;

cout << "FILL (PREENCHE UMA COLEÇÃO COM UM VALOR ESPECIFICO)" << endl;
vector<int>vt2(10);
fill (vt2.begin(),vt2.end(),10);
for (auto x:vt2){
  cout << x << " ";
} cout << endl << endl;

cout << "REMOVE (REMOVE UM VALOR INDICADO):" << endl;
vector<int>vt3{2,1,4,5,7,2,45,7,1,3,6,1};
int qtde = count(vt3.begin(),vt3.end(),2);
remove(vt3.begin(),vt3.end(),2);
vt3.resize(vt3.size()-qtde);
vt3.shrink_to_fit();
for (auto x:vt3){
  cout << x << " ";
} cout << endl << endl;

cout << "UNIQUE (REMOVE ELEMENTOS DUPLICADOS CONSECUTIVOS NA COLEÇÃO)" << endl;
vector<int>vt4{0,1,2,3,3,3,4,5,2,6,7,8,9};
vector<int>::iterator it;
it = unique(vt4.begin(),vt4.end());
vt4.resize(distance(vt4.begin(),it));
for (auto x:vt4){
  cout << x << " ";
} cout << endl << endl;

cout << "REVERSE (INVERTE A ORDEM DOS ELEMENTOS)" << endl;
vector<int>vt5{0,1,2,3,4,5};
reverse(vt5.begin(),vt5.end());
for (auto x:vt5){
  cout << x << " ";
} cout << endl << endl;

cout << "SORT (ORDENA OS ELEMENTOS)" << endl;
vector<int>vt6{3,2,1,5,4};
sort(vt6.begin(),vt6.end());
for (auto x:vt6){
  cout << x << " ";
} cout << endl << endl;

cout << "IS_SORTED (VERIFICA SE ESTA ORDENADO)" << endl;
vector<int>vt7{0,1,2};
if (is_sorted(vt7.begin(),vt7.end())){
  cout << "-ordenado!" << endl << endl;
} else {
  cout << "-não está ordenado!" << endl << endl;
}

cout << "MERGE (MESCLA DUAS COLEÇÕES E ARMAZENA EM UM TERCEIRO CONTAINER)" << endl;
vector<int> vt8{0,1,2,3,4};
vector<int> vt9{5,6,7,8,9};
vector<int> vt10(10);
merge(vt8.begin(),vt8.end(),vt9.begin(),vt9.end(),vt10.begin());
for (auto x:vt10){
  cout << x << " ";
} cout << endl << endl;

cout << "SET_UNION (UNIÃO DE 2 COLEÇÕES)" << endl;
vector<int> vt11{4,0,3,2,1};
vector<int> vt12{5,6,7,8,9};
vector<int> vt13(10);
set_union(vt11.begin(),vt11.end(),vt12.begin(),vt12.end(),vt13.begin());
for (auto x:vt13){
  cout << x << " ";
} cout << endl << endl;

cout << "SET_INTERSECTION (INTERSECÇÃO DE 2 COLEÇÕES)" << endl;
vector<int> vt14{0,1,2,3,4};
vector<int> vt15{2,3,4,5,6};
vector<int> vt16(3);
set_intersection (vt14.begin(),vt14.end(),vt15.begin(),vt15.end(),vt16.begin());
for (auto x:vt16){
  cout << x << " ";
} cout << endl << endl;

cout << "SET_DIFFERENCE (DIFERENÇA DE 2 COLEÇÕES)" << endl << endl;

cout << "MIN/MAX (RETORNA O MENOR/MAIOR VALOR ENTRE DOIS VALORES" << endl;
int n1 = 10, n2 = 5;
cout << min(n1,n2) << endl << max(n1,n2) << endl << endl;

cout << "MINMAX (RETORNA O MENOReMAIOR VALORES ENTRE VARIOS VALORES" << endl;
int n3 = 10, n4 = 5, n5 = 8, n6 = 2;
auto res = minmax({n3,n4,n5,n6});
cout << res.first << endl << res.second << endl << endl;

cout << "MIN/MAX/MINMAX_ELEMENT (CONTAINER)" << endl;
vector<int>vt20{5,4,10,30,12,17,8};
vector<int>::iterator it1,it2;

it1 = min_element(vt20.begin(),vt20.end());
it2 = max_element(vt20.begin(),vt20.end());
auto res2 = minmax_element(vt20.begin(), vt20.end());
cout << *it1 << endl << *it2 << endl << *res2.first << endl << *res2.second << endl << endl;


return 0;
}