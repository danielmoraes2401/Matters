//HERANÇA
#include <iostream>
using namespace std;

class Veiculo {
public:
  int velMax;
  int rodas;
  void setNome(const char* nm){
    nome = nm;
  }
  const char* getNome(){
    return nome;
  }
  void setCor (const char *co){
    cor = co;
  }
  const char* getCor(){
    return cor;
  }
//VIRTUAL = METODO SUBSCRITO EM OUTRA CLASSE QUE VAI HERDAR EM OUTRA CLASSE HERDADA  
  virtual void imp(){
    cout << "Nome.......: " << nome << endl;
    cout << "Cor:........: " << cor << endl;
    cout << "Rodas.......: " << rodas << endl;
    cout << "Vel Max.....: " << velMax << endl << endl;
  }

private:
  const char* nome;
  const char* cor;

};

//a subclasse Carro herdando o Veiculo
//tem que colocar publico se não automaticamente define como privado
class Carro:public Veiculo {
public:  
  Carro(){
    velMax = 160;
    rodas = 4;
    setNome("Carro");
    setCor("Branco");
  
  }
};

class Moto:public Veiculo {
public:  
  Moto(){
    velMax = 200;
    rodas = 2;
    setNome("Moto");
    setCor("Vermelho");
  
  }
};

class Militar:public Veiculo {
public:
  int municao;
  bool armamento;  
  Militar(bool arma, int muni):armamento(arma), municao(muni){
    velMax = 100;
    rodas = 6;
    setNome("Tanque");
    setCor("Verde");
    if (arma){
      municao = muni;
    } else {
      municao = 0;
    }
  }
  // OVERRIDE = Metodo esta sobreescrevendo o metodo original
  void imp() override {
    cout << "Nome.......: " << getNome() << endl;
    cout << "Cor:........: " << getCor() << endl;
    cout << "Rodas.......: " << rodas << endl;
    cout << "Vel Max.....: " << velMax << endl;
    cout << "Munição.......: " << municao << endl;
    cout << "Armamanto.......: " << armamento << endl << endl;
  }
};

int main(){
  Carro v1;
  v1.imp();

  Moto v2;
  v2.imp();

  Militar v3{false, 200};
  v3.imp();

  Militar v4{true, 100};
  v4.imp();

  return 0;
}
